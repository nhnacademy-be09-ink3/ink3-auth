name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build & Upload JAR
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Build with coverage
        run: mvn clean verify -B -Dspring.profiles.active=test

      - name: Upload built JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Run Sonar Scan
        run: |
          mvn verify sonar:sonar \
            -Dsonar.projectKey=ink3_auth_server \
            -Dsonar.projectName='ink3_auth_server' \
            -Dsonar.host.url=http://s4.java21.net:9000 \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Check coverage threshold
        run: |
          LINE_COVERAGE=$(grep -A1 "<counter type=\"LINE\"" target/site/jacoco/jacoco.xml | grep -oP 'covered="\K[0-9]+' | paste -sd+ - | bc)
          LINE_MISSED=$(grep -A1 "<counter type=\"LINE\"" target/site/jacoco/jacoco.xml | grep -oP 'missed="\K[0-9]+' | paste -sd+ - | bc)
          TOTAL=$((LINE_COVERAGE + LINE_MISSED))
          PERCENT=$((LINE_COVERAGE * 100 / TOTAL))
          echo "Coverage: $PERCENT%"
#          if [ "$PERCENT" -lt 60 ]; then
#            echo "Coverage is below 60%! Failing build."
#            exit 1
#          fi

  test:
    name: Run app + health check
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Run app
        run: |
          nohup java -jar *.jar --server.port=8080 --spring.profiles.active=test > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait and health check
        run: |
          sleep 10
          curl --fail http://localhost:8080/actuator/health

      - name: Run unit tests
        run: mvn test -B -Dspring.profiles.active=test

      - name: Kill app
        run: kill $(cat app.pid)

      - name: Show logs on fail
        if: failure()
        run: cat app.log

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Extract version from POM
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 추출된 버전 확인
        run: echo "${{ steps.extract_version.outputs.version }} 입니다."

      - name: Write key files
        run: |
          echo "${{ secrets.JWT_PRIVATE_KEY }}" > private.pem
          echo "${{ secrets.JWT_PUBLIC_KEY }}" > public.pem

      - name: Copy JAR & keys to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_IP }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          source: "*.jar,private.pem,public.pem"
          target: "~/ink3-server/auth/"

      - name: Run deploy script
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_IP }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/ink3-server/auth
            chmod +x deploy.sh
            export EUREKA_URL=${{ secrets.EUREKA_URL }}
            export JWT_PRIVATE_KEY_PATH=${{ secrets.JWT_PRIVATE_KEY_PATH }}
            export JWT_PUBLIC_KEY_PATH=${{ secrets.JWT_PUBLIC_KEY_PATH }}
            nohup ./deploy.sh "${{ steps.extract_version.outputs.version }}" > deploy.log 2>&1 &
            exit 0
