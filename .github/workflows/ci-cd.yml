name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from POM
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 추출된 버전 확인
        run: echo "${{ steps.extract_version.outputs.version }} 입니다."

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build all modules with Maven
        run: mvn clean install -DskipTests=true -B

  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: SonarQube Scan
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=ink3_auth_server \
            -Dsonar.projectName='ink3_auth_server' \
            -Dsonar.host.url=http://s4.java21.net:9000 \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Extract version from POM
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 추출된 버전 확인
        run: echo "${{ steps.extract_version.outputs.version }} 입니다."

      - name: Package application (skip tests)
        run: mvn package -DskipTests=true -B

      - name: Run application in background
        run: |
          nohup java -jar target/ink3-auth-${{ steps.extract_version.outputs.version }}.jar --server.port=10256 > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for application to start
        run: sleep 15

      - name: Check JAR file exists
        run: ls -lh target/ink3-auth-${{ steps.extract_version.outputs.version }}.jar

      - name: Check health endpoint
        run: curl --fail http://localhost:10256/actuator/health

      - name: Stop application
        run: kill $(cat app.pid)

      - name: Run unit tests
        run: mvn test -B

      - name: Print app log if health check fails
        if: failure()
        run: cat app.log

  deploy:
    name: Deploy to Linux Server
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Build JAR (skip tests)
        run: mvn package -DskipTests=true -B

      - name: Verify JAR file
        run: ls -lh target/*.jar

      - name: Extract version from POM
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 추출된 버전 확인
        run: echo "${{ steps.extract_version.outputs.version }} 입니다."

      - name: Copy JAR to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_IP }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          source: "target/*.jar"
          target: "~/ink3-server/auth"

      - name: Run deploy.sh on server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_IP }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/ink3-server/auth
            chmod +x deploy.sh
            nohup ./deploy.sh "${{ steps.extract_version.outputs.version }}" > deploy.log 2>&1 &
            exit 0
